using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

// will handle all inputs abd pass them out via Actions

public class InputManager : MonoBehaviour, Inputs.IPlayerActions
{
    #region Instance
    private static InputManager instance;

    
    public static InputManager Instance
    {
        get
        {
            if (instance == null)
            {
                instance = FindObjectOfType<InputManager>();
                if (instance == null)
                {
                    GameObject obj = new GameObject("InputManager");
                }
            }
            return instance;
        }
    }
    #endregion

   
    // Reference to the Inputs class, which is generated by the Input System
    private Inputs inputs;

    void Awake()
    {

        // Initialize the GameInput instance
        inputs = new Inputs();

        // Enable the Player action map to start listening for player input
        inputs.Player.Enable();

        // Set this script (InputManager) as the callback handler for player actions
        // This ensures methods like OnMove are called when the respective inputs are performed
        inputs.Player.SetCallbacks(this);
   
        #region Singleton
        if (instance == null)
        {
            instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
        #endregion
    }


    #region Input Events
    public event Action<Vector2> MoveEvent;
    public event Action<Vector2> LookEvent;
    public event Action JumpEvent;
    public event Action<bool> SprintEvent;
    public event Action<bool> CrouchEvent;
    public event Action PauseEvent;
    #endregion





    #region Input Callbacks
    public void OnMove(InputAction.CallbackContext context)
    {
        MoveEvent?.Invoke(context.ReadValue<Vector2>());
    }

    public void OnLook(InputAction.CallbackContext context)
    {
        LookEvent?.Invoke(context.ReadValue<Vector2>());
    }

    public void OnJump(InputAction.CallbackContext context)
    {
        if (context.started) JumpEvent?.Invoke();
    }

    public void OnSprint(InputAction.CallbackContext context)
    {
        SprintEvent?.Invoke(context.started || context.performed);
    }

    public void OnCrouch(InputAction.CallbackContext context)
    {
        CrouchEvent?.Invoke(context.started || context.performed);
    }

    public void OnPause(InputAction.CallbackContext context)
    {
        if (context.started) PauseEvent?.Invoke();
    }
    #endregion
}

